/*
 * Created on 2 Dec 2016 ( Time 21:46:15 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */

package com.heroku.ra.services;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.heroku.ra.dto.ResortActivities;
import com.heroku.ra.dto.ResortActivity;
import com.heroku.ra.entities.ResortActivityC;
import com.heroku.ra.entities.SignupC;
import com.heroku.ra.exceptions.ResortActivityCNotFoundException;
import com.heroku.ra.repository.ResortActivityCRepository;

@Service
@Transactional(rollbackFor=ResortActivityCNotFoundException.class)
public class ResortActivityCService 
{
	private static Logger logger = LoggerFactory.getLogger(ResortActivityCService.class);
	
	@Autowired
	private ResortActivityCRepository resortactivitycRepository;

	@Autowired
	private PropertyCService propertyService;
		
	@Autowired
	private SignupCService signupCService;
	
	/*
	 * READ methods
	 */
	public Page<ResortActivityC> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("ResortActivityCService -> findAll ResortActivityCs");
		
		return resortactivitycRepository.findAll(new PageRequest(page, count));
	}

	public Iterable<ResortActivityC> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("ResortActivityCService -> findAll ResortActivityCs");
		
		return resortactivitycRepository.findAll();
	}

	public ResortActivityC findBySfid(String resortactivityc){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving ResortActivityC with sfid:" + resortactivityc);
		
		return resortactivitycRepository.findBySfid(resortactivityc);
		
	}

	public ResortActivityC get(int id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving ResortActivityC with id:" + id);
		
		ResortActivityC elementToGet = resortactivitycRepository.findOne(id);
		
		if (elementToGet == null)
			throw new ResortActivityCNotFoundException(id);
		
		return elementToGet;
	}

	public ResortActivityC create(ResortActivityC resortactivityc) {

		if (logger.isDebugEnabled())
			logger.debug("ResortActivityCService -> create:" + resortactivityc);
			
		return resortactivitycRepository.save(resortactivityc);
	}

	public ResortActivityC update(ResortActivityC resortactivityc) {
		
		if (logger.isDebugEnabled())
			logger.debug("ResortActivityCService -> create:" + resortactivityc);

		ResortActivityC elementToUpdate = resortactivitycRepository.findOne(resortactivityc.getId());
		
		if (elementToUpdate == null)
			throw new ResortActivityCNotFoundException(resortactivityc.getName());
		
		elementToUpdate.update(resortactivityc);
		resortactivitycRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public ResortActivityC delete(int id) {
		if (logger.isDebugEnabled())
			logger.debug("ResortActivityCService -> delete:" + id);

		ResortActivityC elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new ResortActivityCNotFoundException(id);
		
		resortactivitycRepository.delete(elementToDelete);

		return elementToDelete;
	}

	public List<ResortActivity> getToday() {
		Date today = new Date();
		Date endOfToday;
		Date startOfToday;
		
		try {
			
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
			SimpleDateFormat afterFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
			endOfToday = afterFormat.parse(dateFormat.format(today) + " 23:59:59");
			startOfToday =  afterFormat.parse(dateFormat.format(today) + " 00:00:00");
						
			List<ResortActivityC> a = resortactivitycRepository.findByActivityStartCAfterAndActivityStartCBeforeOrderByActivityStartCAsc(startOfToday, endOfToday);
			
			return getOtherObjects(a);
		
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return null;
	}

	public List<ResortActivity> getUpcoming(){
		Date today = new Date();
		Date startOfDay;
		Date tomorrow;
		try {
			Calendar c = Calendar.getInstance(); 
			c.setTime(today); 
			c.add(Calendar.DATE, 1);
			tomorrow = c.getTime();
			
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
			SimpleDateFormat afterFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
			startOfDay = afterFormat.parse(dateFormat.format(tomorrow) + " 00:00:00");
			
			List<ResortActivityC> a = resortactivitycRepository.findByActivityStartCAfterOrderByActivityStartCAsc(startOfDay);
			return getOtherObjects(a);

		} catch (ParseException e) {
			e.printStackTrace();
		}
		return null;
	}

	private List<ResortActivity> getOtherObjects(List<ResortActivityC> as) {
		List<ResortActivity> activities = new ArrayList<ResortActivity>();
		
		for (ResortActivityC a : as){
			ResortActivity ra = new ResortActivity(a);
			ra.setProperty(propertyService.findBySfid(a.getPropertyC()));
			activities.add(ra);
		}
		
		return activities;
	}

	public ResortActivities getResortActivities() {
		ResortActivities activities = new ResortActivities(getMine(), getToday(), getUpcoming());
		return activities;
	}

	private Iterable<ResortActivity> getMine() {
		String contact = "0034100000E73GVAAZ";
		List<SignupC> signups = new ArrayList<SignupC>();
		signups = signupCService.findByContact(contact);
		
		List<ResortActivity> activities = new ArrayList<ResortActivity>();
		
		List<String> ids = new ArrayList<String>();
		for (SignupC s: signups){
			ids.add(s.getResortActivityC());
		}
		
		List<ResortActivityC> acts = resortactivitycRepository.findBySfidIn(ids);

		for (ResortActivityC ra : acts){
			ResortActivity r = new ResortActivity(ra);
			r.setProperty(propertyService.findBySfid(ra.getPropertyC()));
			activities.add(r);
		}
		
		return activities;
	}
	
	//get waitlist
	
	//
}

