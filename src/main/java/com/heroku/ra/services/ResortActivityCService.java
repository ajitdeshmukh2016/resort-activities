/*
 * Created on 27 Nov 2016 ( Time 22:49:54 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */

package com.heroku.ra.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.heroku.ra.entities.ResortActivityC;
import com.heroku.ra.exceptions.ResortActivityCNotFoundException;
import com.heroku.ra.repository.ResortActivityCRepository;

@Service
@Transactional(rollbackFor=ResortActivityCNotFoundException.class)
public class ResortActivityCService 
{
	private static Logger logger = LoggerFactory.getLogger(ResortActivityCService.class);
	
	@Autowired
	private ResortActivityCRepository resortactivitycRepository;
		
	/*
	 * READ methods
	 */
	public Page<ResortActivityC> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("ResortActivityCService -> findAll ResortActivityCs");
		
		return resortactivitycRepository.findAll(new PageRequest(page, count));
	}

	public Iterable<ResortActivityC> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("ResortActivityCService -> findAll ResortActivityCs");
		
		return resortactivitycRepository.findAll();
	}

	public ResortActivityC findBySfid(String resortactivityc){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving ResortActivityC with sfid:" + resortactivityc);
		
		return resortactivitycRepository.findBySfid(resortactivityc);
		
	}

	public ResortActivityC get(int id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving ResortActivityC with id:" + id);
		
		ResortActivityC elementToGet = resortactivitycRepository.findOne(id);
		
		if (elementToGet == null)
			throw new ResortActivityCNotFoundException(id);
		
		return elementToGet;
	}

	public ResortActivityC create(ResortActivityC resortactivityc) {

		if (logger.isDebugEnabled())
			logger.debug("ResortActivityCService -> create:" + resortactivityc);
			
		return resortactivitycRepository.save(resortactivityc);
	}

	public ResortActivityC update(ResortActivityC resortactivityc) {
		
		if (logger.isDebugEnabled())
			logger.debug("ResortActivityCService -> create:" + resortactivityc);

		ResortActivityC elementToUpdate = resortactivitycRepository.findOne(resortactivityc.getId());
		
		if (elementToUpdate == null)
			throw new ResortActivityCNotFoundException(resortactivityc.getName());
		
		elementToUpdate.update(resortactivityc);
		resortactivitycRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public ResortActivityC delete(int id) {
		if (logger.isDebugEnabled())
			logger.debug("ResortActivityCService -> delete:" + id);

		ResortActivityC elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new ResortActivityCNotFoundException(id);
		
		resortactivitycRepository.delete(elementToDelete);

		return elementToDelete;
	}

}

