/*
 * Created on 27 Nov 2016 ( Time 22:49:54 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */

package com.heroku.ra.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.heroku.ra.entities.ActivityCategoryC;
import com.heroku.ra.exceptions.ActivityCategoryCNotFoundException;
import com.heroku.ra.repository.ActivityCategoryCRepository;

@Service
@Transactional(rollbackFor=ActivityCategoryCNotFoundException.class)
public class ActivityCategoryCService 
{
	private static Logger logger = LoggerFactory.getLogger(ActivityCategoryCService.class);
	
	@Autowired
	private ActivityCategoryCRepository activitycategorycRepository;
		
	/*
	 * READ methods
	 */
	public Page<ActivityCategoryC> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("ActivityCategoryCService -> findAll ActivityCategoryCs");
		
		return activitycategorycRepository.findAll(new PageRequest(page, count));
	}

	public Iterable<ActivityCategoryC> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("ActivityCategoryCService -> findAll ActivityCategoryCs");
		
		return activitycategorycRepository.findAll();
	}

	public ActivityCategoryC findBySfid(String activitycategoryc){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving ActivityCategoryC with sfid:" + activitycategoryc);
		
		return activitycategorycRepository.findBySfid(activitycategoryc);
		
	}

	public ActivityCategoryC get(int id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving ActivityCategoryC with id:" + id);
		
		ActivityCategoryC elementToGet = activitycategorycRepository.findOne(id);
		
		if (elementToGet == null)
			throw new ActivityCategoryCNotFoundException(id);
		
		return elementToGet;
	}

	public ActivityCategoryC create(ActivityCategoryC activitycategoryc) {

		if (logger.isDebugEnabled())
			logger.debug("ActivityCategoryCService -> create:" + activitycategoryc);
			
		return activitycategorycRepository.save(activitycategoryc);
	}

	public ActivityCategoryC update(ActivityCategoryC activitycategoryc) {
		
		if (logger.isDebugEnabled())
			logger.debug("ActivityCategoryCService -> create:" + activitycategoryc);

		ActivityCategoryC elementToUpdate = activitycategorycRepository.findOne(activitycategoryc.getId());
		
		if (elementToUpdate == null)
			throw new ActivityCategoryCNotFoundException(activitycategoryc.getName());
		
		elementToUpdate.update(activitycategoryc);
		activitycategorycRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public ActivityCategoryC delete(int id) {
		if (logger.isDebugEnabled())
			logger.debug("ActivityCategoryCService -> delete:" + id);

		ActivityCategoryC elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new ActivityCategoryCNotFoundException(id);
		
		activitycategorycRepository.delete(elementToDelete);

		return elementToDelete;
	}

}

