/*
 * Created on 5 Dec 2016 ( Time 11:51:40 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */

package com.heroku.ra.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.heroku.ra.entities.GuestStayC;
import com.heroku.ra.exceptions.GuestStayCNotFoundException;
import com.heroku.ra.repository.GuestStayCRepository;

@Service
@Transactional(rollbackFor=GuestStayCNotFoundException.class)
public class GuestStayCService 
{
	private static Logger logger = LoggerFactory.getLogger(GuestStayCService.class);
	
	@Autowired
	private GuestStayCRepository gueststaycRepository;
		
	/*
	 * READ methods
	 */
	public Page<GuestStayC> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("GuestStayCService -> findAll GuestStayCs");
		
		return gueststaycRepository.findAll(new PageRequest(page, count));
	}

	public Iterable<GuestStayC> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("GuestStayCService -> findAll GuestStayCs");
		
		return gueststaycRepository.findAll();
	}

	public GuestStayC findBySfid(String gueststayc){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving GuestStayC with sfid:" + gueststayc);
		
		return gueststaycRepository.findBySfid(gueststayc);
		
	}

	public GuestStayC get(int id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving GuestStayC with id:" + id);
		
		GuestStayC elementToGet = gueststaycRepository.findOne(id);
		
		if (elementToGet == null)
			throw new GuestStayCNotFoundException(id);
		
		return elementToGet;
	}

	public GuestStayC create(GuestStayC gueststayc) {

		if (logger.isDebugEnabled())
			logger.debug("GuestStayCService -> create:" + gueststayc);
			
		return gueststaycRepository.save(gueststayc);
	}

	public GuestStayC update(GuestStayC gueststayc) {
		
		if (logger.isDebugEnabled())
			logger.debug("GuestStayCService -> create:" + gueststayc);

		GuestStayC elementToUpdate = gueststaycRepository.findOne(gueststayc.getId());
		
		if (elementToUpdate == null)
			throw new GuestStayCNotFoundException(gueststayc.getName());
		
		elementToUpdate.update(gueststayc);
		gueststaycRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public GuestStayC delete(int id) {
		if (logger.isDebugEnabled())
			logger.debug("GuestStayCService -> delete:" + id);

		GuestStayC elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new GuestStayCNotFoundException(id);
		
		gueststaycRepository.delete(elementToDelete);

		return elementToDelete;
	}

}

