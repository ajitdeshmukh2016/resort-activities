/*
 * Created on 27 Nov 2016 ( Time 22:49:54 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */

package com.heroku.ra.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.heroku.ra.entities.ActivitySubcategoryC;
import com.heroku.ra.exceptions.ActivitySubcategoryCNotFoundException;
import com.heroku.ra.repository.ActivitySubcategoryCRepository;

@Service
@Transactional(rollbackFor=ActivitySubcategoryCNotFoundException.class)
public class ActivitySubcategoryCService 
{
	private static Logger logger = LoggerFactory.getLogger(ActivitySubcategoryCService.class);
	
	@Autowired
	private ActivitySubcategoryCRepository activitysubcategorycRepository;
		
	/*
	 * READ methods
	 */
	public Page<ActivitySubcategoryC> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("ActivitySubcategoryCService -> findAll ActivitySubcategoryCs");
		
		return activitysubcategorycRepository.findAll(new PageRequest(page, count));
	}

	public Iterable<ActivitySubcategoryC> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("ActivitySubcategoryCService -> findAll ActivitySubcategoryCs");
		
		return activitysubcategorycRepository.findAll();
	}

	public ActivitySubcategoryC findBySfid(String activitysubcategoryc){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving ActivitySubcategoryC with sfid:" + activitysubcategoryc);
		
		return activitysubcategorycRepository.findBySfid(activitysubcategoryc);
		
	}

	public ActivitySubcategoryC get(int id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving ActivitySubcategoryC with id:" + id);
		
		ActivitySubcategoryC elementToGet = activitysubcategorycRepository.findOne(id);
		
		if (elementToGet == null)
			throw new ActivitySubcategoryCNotFoundException(id);
		
		return elementToGet;
	}

	public ActivitySubcategoryC create(ActivitySubcategoryC activitysubcategoryc) {

		if (logger.isDebugEnabled())
			logger.debug("ActivitySubcategoryCService -> create:" + activitysubcategoryc);
			
		return activitysubcategorycRepository.save(activitysubcategoryc);
	}

	public ActivitySubcategoryC update(ActivitySubcategoryC activitysubcategoryc) {
		
		if (logger.isDebugEnabled())
			logger.debug("ActivitySubcategoryCService -> create:" + activitysubcategoryc);

		ActivitySubcategoryC elementToUpdate = activitysubcategorycRepository.findOne(activitysubcategoryc.getId());
		
		if (elementToUpdate == null)
			throw new ActivitySubcategoryCNotFoundException(activitysubcategoryc.getName());
		
		elementToUpdate.update(activitysubcategoryc);
		activitysubcategorycRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public ActivitySubcategoryC delete(int id) {
		if (logger.isDebugEnabled())
			logger.debug("ActivitySubcategoryCService -> delete:" + id);

		ActivitySubcategoryC elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new ActivitySubcategoryCNotFoundException(id);
		
		activitysubcategorycRepository.delete(elementToDelete);

		return elementToDelete;
	}

}

